//this file was generated by stmtGen.js
public abstract class Stmt {
public abstract T Accept<T>(IVisitor<T> visitor);
public abstract int Index {get;set;}
public abstract int Length {get;set;}
public class Expression : Stmt {
public Expr Expr;
int _index;
int _length;
public Expression(Expr expr, int index, int length) {
this.Expr = expr;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitExpression(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class Print : Stmt {
public Expr Expr;
int _index;
int _length;
public Print(Expr expr, int index, int length) {
this.Expr = expr;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitPrint(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class VarDecl : Stmt {
public Token.Ident Name;
public Expr Expr;
int _index;
int _length;
public VarDecl(Token.Ident name, Expr expr, int index, int length) {
this.Name = name;
this.Expr = expr;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitVarDecl(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class Block : Stmt {
public List<Stmt> Statements;
int _index;
int _length;
public Block(List<Stmt> statements, int index, int length) {
this.Statements = statements;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitBlock(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class If : Stmt {
public Expr Condition;
public Stmt MetStmt;
public Stmt? ElseStmt;
int _index;
int _length;
public If(Expr condition, Stmt metstmt, Stmt? elsestmt, int index, int length) {
this.Condition = condition;
this.MetStmt = metstmt;
this.ElseStmt = elsestmt;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitIf(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class While : Stmt {
public Expr Condition;
public Stmt LoopStmt;
public Stmt? ElseStmt;
int _index;
int _length;
public While(Expr condition, Stmt loopstmt, Stmt? elsestmt, int index, int length) {
this.Condition = condition;
this.LoopStmt = loopstmt;
this.ElseStmt = elsestmt;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitWhile(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class For : Stmt {
public Stmt? Initial;
public Expr? Condition;
public Expr? Increment;
public Stmt LoopStmt;
public Stmt? ElseStmt;
int _index;
int _length;
public For(Stmt? initial, Expr? condition, Expr? increment, Stmt loopstmt, Stmt? elsestmt, int index, int length) {
this.Initial = initial;
this.Condition = condition;
this.Increment = increment;
this.LoopStmt = loopstmt;
this.ElseStmt = elsestmt;
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitFor(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class Break : Stmt {
int _index;
int _length;
public Break(int index, int length) {
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitBreak(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public class Continue : Stmt {
int _index;
int _length;
public Continue(int index, int length) {
_index = index;
_length = length;
}
public override T Accept<T>(IVisitor<T> visitor) => visitor.visitContinue(this);
public override int Index{get=>_index;set=>_index=value;}
public override int Length{get=>_length;set=>_length=value;}
}
public interface IVisitor<T> {
T visitExpression(Stmt.Expression stmt);
T visitPrint(Stmt.Print stmt);
T visitVarDecl(Stmt.VarDecl stmt);
T visitBlock(Stmt.Block stmt);
T visitIf(Stmt.If stmt);
T visitWhile(Stmt.While stmt);
T visitFor(Stmt.For stmt);
T visitBreak(Stmt.Break stmt);
T visitContinue(Stmt.Continue stmt);
}
}