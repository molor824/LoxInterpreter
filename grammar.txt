precedence:
1. number, string, boolean, nil, grouping
2. unary operators
3. factor
4. term
5. comparison
6. equality
7. expression

program: declaration* EOF;
declaration: varDecl | statement;
parameters: '(' (IDENT ( ',' IDENT )*)? ')';
varDecl: 'var' IDENT ('=' expression)? ';';
statement: exprStmt | block | ifStmt | whileStmt | forStmt | breakStmt | continueStmt | returnStmt;
returnStmt: '<-' expression? ';'; // why not cursed syntax for return :)
breakStmt: 'break;';
continueStmt: 'continue;';
ifStmt: 'if' expression statement ('else' statement)?;
whileStmt: 'while' expression statement ('else' statement)?;
forStmt: 'for' (exprStmt | varDecl | ';') expression? ';' expression? statement ('else' statement)?;
block: "{" declaration* "}";
exprStmt: expression ';';
expression: assignment;
assignment: orLogic ('=' | '+=' | '-=' | '*=' | '/=' | '%=' | '||=' | '&&=') assignment | orLogic;
orLogic: andLogic ("||" andLogic)*;
andLogic: equality ("&&" equality)*;
equality: comparison (('==' | '!=') comparison)*;
comparison: term (('<' | '>' | '<=' | '>=') term)*;
term: factor (('+' | '-') factor)*;
factor: unary (('*' | '/' | '%') unary)*;
unary: ('!' | '-') unary | increment;
increment: IDENT ('++' | '--') | call;
call: primary ('(' arguments? ')')*;
arguments: expression (',' expression)*;
primary: NUMBER | STRING | 'true' | 'false' | 'nil' | '(' expression ')' | IDENT | 'fn' parameters;